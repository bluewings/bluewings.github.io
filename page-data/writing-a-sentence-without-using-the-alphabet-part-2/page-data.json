{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/writing-a-sentence-without-using-the-alphabet-part-2/","webpackCompilationHash":"76c7e4d6d5dcc6120857","result":{"data":{"site":{"siteMetadata":{"title":"아빠는 개발자","titleEn":"Dev Dad","author":"Cha Sung Won","social":{"disqusShortname":"dev-dad"},"github":{"owner":"bluewings","repository":"dev-dad"}}},"mdx":{"id":"4e9eee5a-d6a4-5fcc-9da6-857bcc94b2bc","excerpt":"이전 글:  알파벳 없이 문장 쓰기 이전 글에서 일부 문자를 만들 수 없다고 썼었는데, 며칠 지나지 않아 그  문제의 해결법을 제시한 글 을 찾았습니다. 그리고  (   )   +   [   ]   !  이 여섯개의 문자만으로 JavaScript…","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `이전 글: `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"/writing-a-sentence-without-using-the-alphabet/\"\n      }\n    }, `알파벳 없이 문장 쓰기`)), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `이전 글에서 일부 문자를 만들 수 없다고 썼었는데, 며칠 지나지 않아 그 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html\"\n      }\n    }, `문제의 해결법을 제시한 글`), `을 찾았습니다. 그리고 `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `(`), ` `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `)`), ` `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `+`), ` `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `[`), ` `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `]`), ` `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `!`), ` 이 여섯개의 문자만으로 JavaScript 를 표현하는 구현체가 이미 있었습니다. ㅠ_ㅠ `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"http://patriciopalladino.com/files/hieroglyphy/\"\n      }\n    }, `Hieroglyphy`), `, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"http://www.jsfuck.com/\"\n      }\n    }, `JSF*ck`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `이미 동일한 기능의 라이브러리가 있다는 사실에 조금 실망했지만 호기심을 만족시키기 위해 위의 내용을 참고하여 코드 생성기를 수정했습니다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `아래에 텍스트를 입력하시면 영문, 숫자를 포함한 모든 문자를 제한된 코드로 변환해줍니다.`), React.createElement(GeneratorV2, null), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `아래는 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html\"\n      }\n    }, `Non alphanumeric JavaScript`), `에서 제시한 방법입니다. 위의 코드 생성기는 아래의 과정을 통해 문자를 코드로 변환합니다.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `마스터키 🔑`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `무슨 문자든지 만들어 낼 수 있는 마스터키로 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/unescape\"\n      }\n    }, `unescape()`), ` 함수를 사용할 수 있습니다.`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `The `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `unescape()`), ` function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents.`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript{7-8}\"\n      }\n    }, `/**\n * @param {string} str - A string to be decoded.\n * @return {string} A new string in which certain characters have been unescaped.\n * @example unescape(str)\n */\n\nunescape('abc123');         // \"abc123\"\nunescape('%uC548%uB155');   // \"안녕\"\nunescape('%uD83D%uDC4B');   // \"👋\"\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `위의 예제처럼 `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `unescape`), ` 함수와 `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `% + HEXA_ASCII_VALUE`), ` 형태의 값으로 원하는 모든 만들 수 있는데, 저 함수를 실행하기 위해서는 두 가지 사항을 해결해야 합니다.`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"li\"\n    }, `문자열을 실행 가능한 스크립트로 변환`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(\"code\", null, \"unesca\", React.createElement(\"span\", {\n      style: {\n        \"color\": \"red\"\n      }\n    }, \"p\"), \"e('\", React.createElement(\"span\", {\n      style: {\n        \"color\": \"red\"\n      }\n    }, \"%\"), \"41')\"), \" \\uC2A4\\uD06C\\uB9BD\\uD2B8\\uB97C \\uB9CC\\uB4E4\\uB824\\uBA74 \", React.createElement(\"code\", null, \"p\"), \" \", React.createElement(\"code\", null, \"%\"), \" \\uB450 \\uBB38\\uC790\\uAC00 \\uCD94\\uAC00\\uB85C \\uD544\\uC694\", React.createElement(\"br\", null), \"\\uB098\\uBA38\\uC9C0 \\uBB38\\uC790\\uB4E4\\uC740 \", React.createElement(\"a\", {\n      href: \"/writing-a-sentence-without-using-the-alphabet\"\n    }, \"\\uC774\\uC804 \\uAE00\"), \"\\uC5D0\\uC11C \\uC124\\uBA85\\uD55C \\uBC29\\uBC95\\uC73C\\uB85C \\uC5BB\\uC744 \\uC218 \\uC788\\uB2E4.\")), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `1. 문자열을 실행 가능한 스크립트로 변환`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function\"\n      }\n    }, `Function`), ` 생성자를 사용하면 실행 가능한 함수를 만들 수 있습니다.`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"strong\"\n    }, `Function`), ` 생성자`), `는 새 `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Function`), ` `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `객체`), `를 만듭니다. 이 생성자를 직접적으로 호출하여 동적으로 함수를 생성할 수 있습니다.`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript{8}\"\n      }\n    }, `/**\n * @param {string} arg1, arg1, ...argN - 함수에서 형식 인수 이름으로 사용할 이름\n * @param {string} functionBody - 함수 정의를 구성하는 자바스크립트 문으로 이루어진 문자열.\n * @return {function} 실행 가능한 함수\n * @example var sum = Function('a', 'b', 'return a + b');\n */\n\nFunction('return unescape')     // ƒ anonymous() { return unescape }\nFunction('return unescape')()   // ƒ unescape() { [native code] }\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Function 생성자는 아래와 같은 방법으로 얻을 수 있습니다.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `({}).constructor.constructor    // ƒ Function() { [native code] }\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `constructor의 각 문자는 이전 글의 방법으로 모두 얻을 수 있습니다.\n따라서 아래와 같은 코드로 Function 생성자를 얻을 수 있습니다.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript{6-12}\"\n      }\n    }, `({})\n  .constructor          // ƒ Object() { [native code] }\n  .constructor          // ƒ Function() { [native code] }\n,\n({})['constructor']['constructor']\n,\n({})[\n  // 'constructor'\n  (![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]\n][\n  // 'constructor'\n  (![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]\n]\n// -> ƒ Function() { [native code] }\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `2. p, %`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `1번 과정에서 얻은 Function 생성자로 `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `p`), ` `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `%`), ` 두 문자를 구할 수 있습니다.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `p`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/Location\"\n      }\n    }, `Location`), ` 인터페이스를 사용하여 현재 웹사이트의 주소를 얻을 수 있고,`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `location              // Location { ... }\nlocation.href         // 'https://...'\nlocation.toString()   // 'https://...'\nlocation + []         // 'https://...'\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `인터넷 주소 프로토콜(`, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `http:`), `, `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `https:`), `)의 네 번째 문자는 `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `p`), `입니다.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `({})\n  .constructor          // ƒ Object() { [native code] }\n  .constructor          // ƒ Function() { [native code] }\n  ('return location')   // ƒ anonymous() { return location }\n  ()                    // Location { ... }\n  + []                  // \"https://...\"\n,\n({})['constructor']['constructor']('return location')() + []\n,\n// ({})['constructor']['constructor']\n({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]\n(\n  // 'return location'\n  (!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(!![]+[])[+[]]+(![]+[]+[][[]])[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]\n)() + []\n// -> 'https://...'\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `// 'https://...'\n(({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]\n((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(!![]+[])[+[]]+(![]+[]+[][[]])[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]\n)()+[])\n// [3]\n[!+[] + !![] + !![]]\n// ('https://...')[3] -> 'p'\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `%`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/escape\"\n      }\n    }, `escape()`), ` 함수를 아래와 같이 사용합니다.\n결과의 첫 번째 문자를 가져오면 되겠네요.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `escape('[')    // '%5B'\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `({})\n  .constructor          // ƒ Object() { [native code] }\n  .constructor          // ƒ Function() { [native code] }\n  ('return escape')     // ƒ anonymous() { return escape }\n  ()                    // ƒ escape() { [native code] }\n  ('[')                 // \"%5B\"\n,\n({})['constructor']['constructor']('return escape')()('[')\n,\n// ({})['constructor']['constructor']\n({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]\n(\n  // 'return escape'\n  (!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+([]+{})[+!![]+[+!![]]]+(![]+[])[!+[]+!![]+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(!![]+[])[+[]]+(![]+[]+[][[]])[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]])()+[])[+(!+[]+!![]+!![])]+([]+{})[+!![]+[+!![]]]\n)()(\n  // '['\n  ([]+{})[+[]]\n)\n// -> '%5B'\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `// '%5B'\n({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+([]+{})[+!![]+[+!![]]]+(![]+[])[!+[]+!![]+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(!![]+[])[+[]]+(![]+[]+[][[]])[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]])()+[])[+(!+[]+!![]+!![])]+([]+{})[+!![]+[+!![]]])()(([]+{})[+[]])\n// [0]\n[+[]]\n// ('%5B')[0] -> '%'\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `3. unescape 함수`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `드디어 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/unescape\"\n      }\n    }, `unescape()`), ` 함수를 만들 수 있고,`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `({})\n  .constructor          // ƒ Object() { [native code] }\n  .constructor          // ƒ Function() { [native code] }\n  ('return unescape')   // ƒ anonymous() { return escape }\n  ()                    // ƒ unescape() { [native code] }\n,\n({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(![]+[])[!+[]+!![]+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(!![]+[])[+[]]+(![]+[]+[][[]])[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]])()+[])[!+[]+!![]+!![]]+([]+{})[+!![]+[+!![]]])()\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `이제 원하는 모든 문자를 만들 수 있게 되었습니다.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-javascript\"\n      }\n    }, `unescape('%ud83c%udf7a')  // \"🍺\"\n,\n({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(![]+[])[!+[]+!![]+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(!![]+[])[+[]]+(![]+[]+[][[]])[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]])()+[])[!+[]+!![]+!![]]+([]+{})[+!![]+[+!![]]])()\n(\n  (({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+([]+{})[+!![]+[+!![]]]+(![]+[])[!+[]+!![]+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(!![]+[])[+[]]+(![]+[]+[][[]])[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]])()+[])[+(!+[]+!![]+!![])]+([]+{})[+!![]+[+!![]]])()(([]+{})[+[]]))[+[]]+([][[]]+[])[+[]]+([][[]]+[])[!+[]+!![]]+((!+[]+!![])**(!+[]+!![]+!![])+[!+[]+!![]+!![]])+(![]+{})[+!![]+[+[]]]+(({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+([]+{})[+!![]+[+!![]]]+(![]+[])[!+[]+!![]+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(({})[(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]][(![]+{})[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]]+(![]+[])[!+[]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+[]]+(![]+{})[+!![]+[+[]]]+(!![]+[])[+[]]+([]+{})[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+([]+{})[+!![]+[+!![]]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!![]]+([][[]]+[])[+!![]]+(+{}+{})[+!![]+[+[]]]+(![]+[])[!+[]+!![]]+([]+{})[+!![]]+(![]+{})[+!![]+[+[]]]+(![]+[])[+!![]]+(!![]+[])[+[]]+(![]+[]+[][[]])[+!![]+[+[]]]+([]+{})[+!![]]+([][[]]+[])[+!![]])()+[])[+(!+[]+!![]+!![])]+([]+{})[+!![]+[+!![]]])()(([]+{})[+[]]))[+[]]+([][[]]+[])[+[]]+([][[]]+[])[!+[]+!![]]+(![]+[])[+[]]+((+!![]+[+[]])-(!+[]+!![]+!![]))+(![]+[])[+!![]]\n)\n// unescape('%ud83c%udf7a') -> '🍺'\n`)), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `만들고 보니 허무하고, 정말 쓸데없긴 한데 재미는 있었네요. 관심이 있으시면 다음 자료도 참고하세요.`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://github.com/denysdovhan/wtfjs\"\n      }\n    }, `What the f*ck JavaScript?`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"http://patriciopalladino.com/files/hieroglyphy/\"\n      }\n    }, `Hieroglyphy`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"http://www.jsfuck.com/\"\n      }\n    }, `JSF*ck`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://namu.wiki/w/JSFuck\"\n      }\n    }, `JSF*ck / 나무위키`))));\n  }\n\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"알파벳 없이 문장 쓰기 - 파트 2","date":"August 04, 2019","max_width":null},"fields":{"slug":"/writing-a-sentence-without-using-the-alphabet-part-2/","langKey":"ko"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/writing-a-sentence-without-using-the-alphabet-part-2/","previous":{"fields":{"slug":"/writing-a-sentence-without-using-the-alphabet/","langKey":"ko","directoryName":"writing-a-sentence-without-using-the-alphabet","fileExt":"mdx"},"frontmatter":{"title":"알파벳 없이 문장 쓰기"}},"next":{"fields":{"slug":"/_draft-stability-of-population-pyramid/","langKey":"ko","directoryName":"_draft-stability-of-population-pyramid","fileExt":"mdx"},"frontmatter":{"title":"안정적인 인구 피라미드"}},"translations":["en"],"fileExt":"mdx"}}}