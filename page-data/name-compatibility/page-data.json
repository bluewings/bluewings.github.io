{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/name-compatibility/","webpackCompilationHash":"bb502ddb78619230da7a","result":{"data":{"site":{"siteMetadata":{"title":"아빠는 개발자","author":"Cha Sung Won","social":{"disqusShortname":"dev-dad"},"github":{"owner":"bluewings","repository":"dev-dad"}}},"mdx":{"id":"be0ad50b-4355-50b6-9cb6-b8638aa1ea4e","excerpt":"내가 30년 전 초등학교 다닐 적에 하던 놀이 중에 아직도 남아있는 것들이 있다. 이름의 획 수를 가지고 궁합을 계산하는 것도 그중의 하나인데, 아들과 함께 코드로 작성해보았다.","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(\"gatsby--context\", {\n      key: \"gatsby-snippet-0\",\n      args: [],\n      params: {}\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `내가 30년 전 초등학교 다닐 적에 하던 놀이 중에 아직도 남아있는 것들이 있다. 이름의 획 수를 가지고 궁합을 계산하는 것도 그중의 하나인데, 아들과 함께 코드로 작성해보았다.`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `데모`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `입력 창에 두 개 이상의 이름을 입력하시면 각 이름 간의 궁합을 확인할 수 있습니다. (한글 이름만 가능합니다.)`), React.createElement(Context, null, ({\n      setValue\n    }) => {\n      const handleCasesChange = cases => {\n        setValue('cases', cases);\n      };\n\n      return React.createElement(Calculator, {\n        onCasesChange: handleCasesChange\n      });\n    }), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `코드`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `입력받은 이름의 각 글자의 획수를 알아내는 부분이 조금 생소할 뿐, 점수를 계산하는 방법은 단계를 거치면서 합산한 결과를 10으로 나눈 나머지를 특정 조건이 될 때까지 반복하면 된다.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `초성, 중성, 종성 분리`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `아래와 같이 코드를 작성해서 실행해보면 UTF-16 코드 상에서 한글이 어떤 순서로 배열되어 있는지 짐작할 수 있다.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const BASE = '가'.charCodeAt(0);  // 한글 코드 시작: 44032\n\nArray(100)\n  .fill()\n  .map((e, i) => BASE + i)\n  .map((i) => String.fromCharCode(i))\n  .join(' ');\n// 가 각 갂 갃 간 갅 갆 갇 갈 갉 갊 갋 갌 갍 갎 갏 감 갑 값 갓 갔 강 갖 갗 갘 같 갚 갛\n// 개 객 갞 갟 갠 갡 갢 갣 갤 갥 갦 갧 갨 갩 갪 갫 갬 갭 갮 갯 갰 갱 갲 갳 갴 갵 갶 갷\n// 갸 갹 갺 갻 갼 갽 갾 갿 걀 걁 걂 걃 걄 걅 걆 걇 걈 걉 걊 걋 걌 걍 걎 걏 걐 걑 걒 걓\n// 걔 걕 걖 걗 걘 걙 걚 걛 걜 걝 걞 걟 걠 걡 걢 걣 ...\n`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `이를 바탕으로 초성, 중성, 종성을 분리하고, 각각의 획 수를 반환하는 함수를 작성하였다. (각 자소의 획은 직접 세어 객체로 만들어두었다.)`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const BASE = '가'.charCodeAt(0);  // 한글 코드 시작: 44032\n\nconst INITIALS = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\nconst MEDIALS = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'];\nconst FINALES = ['', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n\nconst STROKES = { '': 0, 'ㄱ': 2, 'ㄲ': 4, 'ㄴ': 2, 'ㄷ': 3, 'ㄸ': 6, 'ㄹ': 5, 'ㅁ': 4, 'ㅂ': 4, 'ㅃ': 8, 'ㅅ': 2, 'ㅆ': 4, 'ㅇ': 1, 'ㅈ': 3, 'ㅉ': 6, 'ㅊ': 4, 'ㅋ': 3, 'ㅌ': 4, 'ㅍ': 4, 'ㅎ': 3, 'ㄳ': 4, 'ㄵ': 5, 'ㄶ': 5, 'ㄺ': 7, 'ㄻ': 9, 'ㄼ': 9, 'ㄽ': 7, 'ㄾ': 9, 'ㄿ': 9, 'ㅀ': 8, 'ㅄ': 6, 'ㅏ': 2, 'ㅐ': 3, 'ㅑ': 3, 'ㅒ': 4, 'ㅓ': 2, 'ㅔ': 3, 'ㅕ': 3, 'ㅖ': 4, 'ㅗ': 2, 'ㅘ': 4, 'ㅙ': 5, 'ㅚ': 3, 'ㅛ': 3, 'ㅜ': 2, 'ㅝ': 4, 'ㅞ': 5, 'ㅟ': 3, 'ㅠ': 3, 'ㅡ': 1, 'ㅢ': 2, 'ㅣ': 1 };\n\nfunction getSymbol(char) {\n  if (!char.match(/[ㄱ-ㅎ가-힣]/)) {\n    return false;\n  }\n  let initial = '';\n  let medial = '';\n  let finale = '';\n  if (char.match(/[ㄱ-ㅎ]/)) {\n    initial = char;\n  } else {\n    const tmp = char.charCodeAt(0) - BASE;\n    const finaleOffset = tmp % FINALES.length;\n    const medialOffset = ((tmp - finaleOffset) / FINALES.length) % MEDIALS.length;\n    const initialOffset = ((tmp - finaleOffset) / FINALES.length - medialOffset) / MEDIALS.length;\n    initial = INITIALS[initialOffset];\n    medial = MEDIALS[medialOffset];\n    finale = FINALES[finaleOffset];\n  }\n  const initialStrokes = STROKES[initial];\n  const medialStrokes = STROKES[medial];\n  const finaleStrokes = STROKES[finale];\n  return {\n    initial,\n    medial,\n    finale,\n    initialStrokes,\n    medialStrokes,\n    finaleStrokes,\n    numOfStrokes: initialStrokes + medialStrokes + finaleStrokes,\n  };\n};\n`)), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `스코어 계산`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `각 글자의 획수를 알 수 있으면 숫자 궁합 점수는 아래와 같이 쉽게 계산할 수 있다.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function getScore(name1, name2) {\n  const symbols1 = name1.match(/[\\s\\S]/g).map((char) => [char, getSymbol(char).numOfStrokes]);\n  const symbols2 = name2.match(/[\\s\\S]/g).map((char) => [char, getSymbol(char).numOfStrokes]);\n  const maxLen = Math.max(symbols1.length, symbols2.length);\n\n  const [chars, numbers] = Array(maxLen)\n    .fill()\n    .reduce(\n      ([accum1, accum2], e, i) => {\n        const [char1, num1] = symbols1[i] || ['', 0];\n        const [char2, num2] = symbols2[i] || ['', 0];\n        return [[...accum1, char1, char2], [...accum2, num1, num2]];\n      },\n      [[], []],\n    );\n\n  let nums = numbers.slice();\n  const stages = [nums];\n  while (nums.length > 2 && nums.join('') !== '100') {\n    nums = nums.reduce((a, e, i, arr) => {\n      if (i < arr.length - 1) {\n        return [...a, (e + arr[i + 1]) % 10];\n      }\n      return a;\n    }, []);\n    stages.push(nums);\n  }\n\n  return { chars, stages, score: ~~stages.slice(-1)[0].join('') };\n}\n// 배성재, 장예원 →\n// {\n//   \"chars\": [\"배\", \"장\", \"성\", \"예\", \"재\", \"원\"],\n//   \"stages\":[\n//     [7, 6, 5, 5, 6, 7],\n//     [3, 1, 0, 1, 3],\n//     [4, 1, 1, 4],\n//     [5, 2, 5],\n//     [7, 7]\n//   ],\n//   \"score\": 77\n// }\n`)), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Chord Diagram`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `데이터를 행렬(Matrix)로 변경하면 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://d3js.org/\"\n      }\n    }, `D3.js`), `를 사용하여 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://observablehq.com/collection/@d3/d3-chord\"\n      }\n    }, `Chord Diagram`), `을 그릴 수 있다.`), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-1\",\n      args: [\"5\"],\n      params: {\n        \"overflow\": \"auto\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-json\"\n      }\n    }, `  {\n    \"name1\": \"공효진\", \"name2\": \"차태현\",\n    \"score1\": 94, \"score2\": 7\n  },\n  {\n    \"name1\": \"공효진\", \"name2\": \"김수현\",\n    \"score1\": 17, \"score2\": 35\n  },\n  {\n    \"name1\": \"차태현\", \"name2\": \"김수현\",\n    \"score1\": 9, \"score2\": 14\n  }\n]\n`)), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-json\"\n      }\n    }, `[\n  [0, 94, 17],\n  [7, 0, 9],\n  [35, 14, 0]\n]\n`)), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-2\",\n      args: [],\n      params: {}\n    }), React.createElement(Context, null, ({\n      value\n    }) => React.createElement(ChordDiagram, {\n      cases: value.cases\n    })), React.createElement(\"gatsby--gridend\", {\n      key: \"gatsby-snippet-3\",\n      args: [],\n      params: {}\n    }));\n  }\n\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"이름 궁합 계산기","date":"June 06, 2019","max_width":"60rem"},"fields":{"slug":"/name-compatibility/","langKey":"ko"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/name-compatibility/","previous":{"fields":{"slug":"/word-superiority-effect/","langKey":"ko","directoryName":"word-superiority-effect","fileExt":"mdx"},"frontmatter":{"title":"'캠릿브지 대학의 연결구과' 변환기"}},"next":{"fields":{"slug":"/playing-with-fonts/","langKey":"ko","directoryName":"playing-with-fonts","fileExt":"mdx"},"frontmatter":{"title":"폰트를 가지고 놀기"}},"translations":[],"fileExt":"mdx"}}}