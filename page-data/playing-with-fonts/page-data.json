{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/playing-with-fonts/","webpackCompilationHash":"1f17a452254dc87297a1","result":{"data":{"site":{"siteMetadata":{"title":"아빠는 개발자","titleEn":"Dev Dad","author":"Cha Sung Won","social":{"disqusShortname":"dev-dad"},"github":{"owner":"bluewings","repository":"dev-dad"}}},"mdx":{"id":"f797e25f-4899-5aec-a2b7-5c028bad22b0","excerpt":"Google Fonts + 한국어  소개 페이지에는 신기한 타이포그래피 효과들이 있다. Google Fonts에서 제공하는 폰트에 다양한 효과를 적용해서 보여주고 있는데, 이 효과들은 단순한 CSS…","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://googlefonts.github.io/korean/\"\n      }\n    }, `Google Fonts + 한국어`), ` 소개 페이지에는 신기한 타이포그래피 효과들이 있다. Google Fonts에서 제공하는 폰트에 다양한 효과를 적용해서 보여주고 있는데, 이 효과들은 단순한 CSS만으로는 적용이 불가능한 것들이어서, 웹 개발자들에게는 훨씬 더 흥미로워 보인다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `위의 소개 페이지의 효과 중에서 가장 신기했던 파도치는 텍스트를 직접 구현했다. 우선 코딩의 결과는 다음과 같다.`), React.createElement(WarpText, {\n      message: \"\\uC544\\uBE60\\uB294 \\uAC1C\\uBC1C\\uC790\",\n      animate: true\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `위 결과물을 구현하기 위해 다음의 단계를 거쳤다. 단계별 상세 과정은 아래에 설명한다.`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `텍스트를 벡터로 변환한다.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `SVG 또는 Canvas로 텍스트를 그린다.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `변환함수를 사용하여 경로를 바꾼다. (그림을 흔든다)`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `3번의 과정을 반복한다. (애니메이션)`)), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `1. 텍스트를 벡터로 변환한다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `구글에서 font parser로 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://opentype.js.org/\"\n      }\n    }, `opentype.js`), `를 찾았다.`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `opentype.js is a JavaScript parser and writer for TrueType and OpenType fonts.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/opentypejs/opentype.js#fontstringtoglyphsstring\"\n      }\n    }, `API 명세`), `를 참고하여 폰트를 로딩한 후 글자의 형태를 어떻게 가져오는지 확인해보자.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `import { load } from 'opentype.js';\n\nload('blackhansans.woff', (err, font) => {\n  const glyphs = font.stringToGlyphs('아빠는 개발자');\n  console.log(glyphs);\n});\n`)), React.createElement(JsonTree, {\n      message: \"\\uC544\\uBE60\\uB294 \\uAC1C\\uBC1C\\uC790\"\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `실행 결과를 확인해 보면, 각 글자에 대한 형태(glyph)와 관련된 정보를 얻을 수 있고, path.commands에 이를 글자로 그릴 수 있는 정보가 있다. (각 노드를 클릭하면 상세 정보를 볼 수 있다)`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `2. SVG 또는 Canvas로 텍스트를 그린다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `SVG를 사용하면 path.commands에 담긴 정보로 경로를 그릴 수 있다. 만약 Canvas를 사용한다면 다음의 메소드를 사용하면 된다. `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo\"\n      }\n    }, `moveTo`), `, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo\"\n      }\n    }, `lineTo`), `, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\"\n      }\n    }, `quadraticCurveTo`), `, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\"\n      }\n    }, `bezierCurveTo`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `path.commands 정보로 SVG에 경로와 포인트를 그려보았다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `참고: `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/ko/docs/Web/SVG/Tutorial/Paths#%EC%84%A0(Line)_%EB%AA%85%EB%A0%B9%EC%96%B4\"\n      }\n    }, `Paths - SVG: Scalable Vector Graphics | MDN`)), React.createElement(WarpText, {\n      message: \"\\uC544\\uBE60\\uB294 \\uAC1C\\uBC1C\\uC790\",\n      outline: true,\n      transform: null,\n      padding: 10,\n      paddingTop: 2,\n      paddingBottom: 2\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `3. 변환함수를 사용하여 경로를 바꾼다. (그림을 흔든다)`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `검색으로 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://benjamminf.github.io/warpjs/\"\n      }\n    }, `Warp.js`), `란 라이브러리를 찾았다. 이 라이브러리는 SVG의 경로를 사용자 정의 함수를 사용하여 형태로 왜곡시킬 수 있게 해준다. `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://codepen.io/benjamminf/pen/NpZLeb\"\n      }\n    }, `Warp.js 예제`), ` 참고`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `삼각함수를 사용하면 흔들리는 효과를 나타낼 수 있을 것 같다. 이전 단계의 결과 그림에서 y좌표에 Sine 함수를 사용하여 변환하면 다음과 같은 결과가 나타났다. 짜잔!`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const warp = new Warp(svg);\n\nwarp.transform(([ x, y ]) => [ x, y + 15 * Math.sin(x / 50) ]);\n`)), React.createElement(WarpText, {\n      message: \"\\uC544\\uBE60\\uB294 \\uAC1C\\uBC1C\\uC790\",\n      outline: true\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `4. 3번의 과정을 반복한다. (애니메이션)`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Sine함수를 계속 이동시키면서 그리면 다음과 같은 에니메이션을 볼 수 있다.`), React.createElement(Trigonometric, null), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `이걸 텍스트에 적용하면 다음과 같다. 디바이스의 성능에 관계없이 동일한 속도를 유지하려면 시간의 offset값을 인자로 활용하면 된다.`), React.createElement(WarpText, {\n      message: \"\\uC544\\uBE60\\uB294 \\uAC1C\\uBC1C\\uC790\",\n      animate: true\n    }), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const warp = new Warp(svg);\n\n// 에니메이션 적용 이전 원본의 좌표를 기억하기 위해 3, 4번째 인자로 x, y값을 넘김\nwarp.transform(([x, y]) => [x, y, x, y]);\n\n// 에니메이션 시작 시점\nconst startAt = new Date().valueOf();\n\nfunction animate() {\n  // 재생시점의 offset값\n  const offset = (new Date().valueOf() - startAt) / 1000;\n  // 이전 값이 아닌 원본의 좌표값으로 좌표를 계산하고, 원본값은 그대로 전달\n  warp.transform(([x, y, ox, oy]) => [\n    x,\n    oy + 15 * Math.sin(x / 50 + offset),\n    ox,\n    oy,\n  ]);\n  requestAnimationFrame(animate);\n}\n\nanimate();\n`)), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `다른 효과 적용`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `transform 함수를 변경하여 다양한 효과를 만들어 보았다.`), React.createElement(WarpText, {\n      message: \"\\uB2C8\\uBAA8\\uB97C \\uCC3E\\uC544\\uC11C\",\n      transform: transform1,\n      animate: true,\n      paddingTop: 2\n    }), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function transform([x, y, { innerHeight, scale, offset }]) {\n  const wave = scale(0.2);\n  const z = Math.max(0, y / innerHeight - 0.1);\n  return [\n    x,\n    y + wave * Math.sin((x + scale(offset) / 400 / 2) / scale(0.5)) * z,\n  ];\n}\n`)), React.createElement(\"div\", {\n      style: {\n        height: '2.5rem'\n      }\n    }), React.createElement(WarpText, {\n      message: \"\\uBD80\\uB4E4\\uBD80\\uB4E4\",\n      transform: transform2,\n      animate: true,\n      interpolate: 20,\n      paddingTop: 2,\n      paddingBottom: 2\n    }), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function transform([x, y, { scale, offset }]) {\n  const wave = scale(0.02);\n  return [\n    x + wave * Math.sin((y + scale(offset) / 2000) / scale(0.05)),\n    y + wave * Math.sin((x + scale(offset) / 2000) / scale(0.05)),\n  ];\n}\n`)), React.createElement(\"div\", {\n      style: {\n        height: '2.5rem'\n      }\n    }), React.createElement(WarpText, {\n      message: \"\\uC5B4\\uC9C0\\uB7EC\\uC6CC\\uC694...\",\n      fontFamily: \"Cute Font\",\n      transform: transform3,\n      animate: true,\n      interpolate: 20,\n      padding: paddingTop\n    }), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function transform([x, y, { scale, offset }]) {\n  const wave = scale(0.2);\n  return [\n    x + wave * Math.sin((y + scale(offset) / 1000) / scale(0.5)),\n    y + wave * Math.sin((x + scale(offset) / 1000) / scale(0.5)),\n  ];\n}\n`)), React.createElement(\"div\", {\n      style: {\n        height: '2.5rem'\n      }\n    }), React.createElement(WarpText, {\n      message: \"\\uD1A0\\uB07C\\uB294 \\uAE61\\uCD1D\\uAE61\\uCD1D\",\n      fontFamily: \"Cute Font\",\n      transform: transform4,\n      animate: true,\n      paddingTop: paddingTop4,\n      paddingBottom: 2\n    }), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function transform([x, y, { scale, offset, charX }]) {\n  const wave = scale(0.5);\n  return [\n    x,\n    y - wave * Math.abs(Math.sin((charX + scale(offset) / 600) / scale(0.4))),\n  ];\n}\n`)), React.createElement(\"div\", {\n      style: {\n        height: '2.5rem'\n      }\n    }), React.createElement(\"div\", {\n      style: {\n        position: 'relative',\n        maxWidth: 600\n      }\n    }, React.createElement(WarpText, {\n      message: \"\\uD574\\uC6B4\\uB300\",\n      transform: transformA1,\n      color: \"silver\",\n      paddingRight: 200,\n      paddingBottom: 150\n    }), React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        width: '100%'\n      }\n    }, React.createElement(WarpText, {\n      message: \"\\uD574\\uC6B4\\uB300\",\n      transform: transformA2,\n      paddingRight: 200,\n      paddingBottom: 200\n    }))), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function transformA1([x, y, { innerHeight }]) {\n  return [\n    x + innerHeight - y,\n    innerHeight * 0.5 + y * 0.5 + x / 3,\n  ];\n}\nfunction transformA2([x, y]) {\n  return [\n    x,\n    y + x / 3,\n  ];\n}\n`)), React.createElement(\"div\", {\n      style: {\n        height: '2.5rem'\n      }\n    }), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `웹 폰트에 관심이 있으시면 다음 자료도 참고하세요.`), React.createElement(MDXTag, {\n      name: \"ul\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://googlefonts.github.io/korean/\"\n      }\n    }, `Google Fonts + 한국어`)), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ul\"\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://d2.naver.com/helloworld/4969726\"\n      }\n    }, `웹 폰트 사용과 최적화의 최근 동향`))));\n  }\n\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"폰트를 가지고 놀기","date":"June 23, 2019","max_width":null},"fields":{"slug":"/playing-with-fonts/","langKey":"ko"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/playing-with-fonts/","previous":{"fields":{"slug":"/name-compatibility/","langKey":"ko","directoryName":"name-compatibility","fileExt":"mdx"},"frontmatter":{"title":"이름 궁합 계산기"}},"next":{"fields":{"slug":"/writing-a-sentence-without-using-the-alphabet/","langKey":"ko","directoryName":"writing-a-sentence-without-using-the-alphabet","fileExt":"mdx"},"frontmatter":{"title":"알파벳 없이 문장 쓰기"}},"translations":["en"],"fileExt":"mdx"}}}