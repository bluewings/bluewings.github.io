{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/thanos-explained/","webpackCompilationHash":"54a3f4154ef7170c0b7b","result":{"data":{"site":{"siteMetadata":{"title":"아빠는 개발자","author":"Cha Sung Won","social":{"disqusShortname":"dev-dad"},"github":{"owner":"bluewings","repository":"dev-dad"}}},"mdx":{"id":"b48491ae-2c34-5e13-90c4-27c2426a58f5","excerpt":"어벤져스 인피니티 워 엔드게임 개봉과 함께 구글은 검색 결과에 이스터 에그를 추가했다. 구글에서 ‘타노스(Thanos…","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-0\",\n      args: [],\n      params: {}\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `어벤져스 인피니티 워 엔드게임 개봉과 함께 구글은 검색 결과에 이스터 에그를 추가했다. 구글에서 ‘타노스(Thanos)‘를 검색하면 오른쪽에 인피니티 건틀릿 아이콘이 보이고, 이를 클릭하면 검색 결과의 절반이 순차적으로 가루가 되어 사라진다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `이스터 에그를 보던 아들이 “아빠도 저런 거 할 수 있어?”라고 묻는다. “아마도?”라고 대답하긴 했는데 막상 구현하려니 어떻게 구현해야 할지 아이디어가 떠오르질 않는다. 결국 브라우저의 개발자 도구를 사용하여 어떻게 작동하는지 살펴보았다. 이스터 에그가 화려해서 복잡할 것으로 예상했지만, 예상과 달리 매우 간단하게 구현되어있었다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `데모를 보려면, 오른쪽의 인피니티 건틀릿을 클릭하세요.`), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-1\",\n      args: [],\n      params: {}\n    }), React.createElement(Example, null), React.createElement(\"gatsby--gridend\", {\n      key: \"gatsby-snippet-2\",\n      args: [],\n      params: {}\n    }), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `다음 세 단계로 웹 문서를 가루로 만들 수 있다.`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `스크린샷 캡쳐`), `: `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://html2canvas.hertzen.com/\"\n      }\n    }, `html2canvas`), ` 라이브러리를 사용하여 원본 엘리먼트의 스크린샷을 캡처한다.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `다수의 레이어로 분할`), `: 원본과 동일한 크기의 이미지 데이터 인스턴스를 생성하고, 원본 스크린샷의 각 픽셀의 데이터를 읽어서 임의의 이미지 데이터 인스턴스로 옮긴다. 픽셀 데이터가 반영된 이후에 이를 각 캔버스에 반영한다.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `각 레이어를 회전하고 이동`), `: 각 캔버스 레이어를 임의의 각도로 회전시키고, 불투명도를 조정하여 점차 보이지 않게 한다. 이 과정에서 각 레이어에 효과를 순차적으로 주면 특정 방향으로 이동하는 효과를 볼 수 있다.`)), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `코드와 함께 예제를 단계별로 자세히 살펴봅시다.`), React.createElement(\"gatsby--context\", {\n      key: \"gatsby-snippet-3\",\n      args: [],\n      params: {}\n    }), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-4\",\n      args: [],\n      params: {\n        \"overflow\": \"auto\"\n      }\n    }), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-5\",\n      className: \"step\",\n      args: [],\n      params: {}\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `1. 스크린샷 캡쳐`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `오른쪽의 예제는 다음과 같은 HTML 코드로 작성되어있다.`), React.createElement(Context, null, ({\n      value\n    }) => React.createElement(Code, {\n      codeString: value.html || '',\n      language: \"html\"\n    })), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `다음 단계의 작업을 위해서 HTML 계층 구조를 가진 엘리먼트를 이미지로 변환하는 과정이 필요한데, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://html2canvas.hertzen.com/\"\n      }\n    }, `html2canvas`), ` 라이브러리를 사용하면 특정 HTML 엘리먼트의 스크린샷을 얻을 수 있다.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `import html2canvas from 'html2canvas';\n\nhtml2canvas(element, {\n  backgroundColor: null,\n}).then((canvas) => {\n  // doSomething(canvas);\n});\n`)), React.createElement(\"gatsby--sectionend\", {\n      key: \"gatsby-snippet-6\",\n      args: [],\n      params: {}\n    }), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-7\",\n      className: \"step\",\n      args: [],\n      params: {\n        \"@stage\": \"capture\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `위의 코드를 실행하여 대상 엘리먼트의 스크린샷을 생성한다. (찰칵)`), React.createElement(\"gatsby--sectionend\", {\n      key: \"gatsby-snippet-8\",\n      args: [],\n      params: {}\n    }), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-9\",\n      args: [],\n      params: {}\n    }), React.createElement(Context, null, ({\n      setValue\n    }) => {\n      const handleScreenshotCapture = canvas => {\n        if (canvas) {\n          setValue('screenshot', canvas);\n        }\n      };\n\n      const handleSampleLoad = html => {\n        setValue('html', html);\n      };\n\n      return React.createElement(\"div\", {\n        className: \"sticky\",\n        style: {\n          top: 0\n        }\n      }, React.createElement(Scrollama, {\n        step: \".step\",\n        offset: \"0.5\",\n        progress: true\n      }, ({\n        index_\n      }) => React.createElement(\"div\", null, React.createElement(Sample, {\n        type: \"text\",\n        capture: index_ > 0,\n        onCapture: handleScreenshotCapture,\n        onLoad: handleSampleLoad\n      }))));\n    }), React.createElement(\"gatsby--gridend\", {\n      key: \"gatsby-snippet-10\",\n      args: [],\n      params: {}\n    }), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-11\",\n      args: [],\n      params: {\n        \"overflow\": \"auto\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `2. 다수의 레이어로 분할`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `이번 단계에서는 이전 단계에서 얻은 스크린샷의 각 픽셀을 다수의 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvas`), `에 나누어 그린다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvas`), `에서는 영역의 픽셀 데이터를 나타내기 위해 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), ` 인터페이스를 사용하는데, 아래의 각 단계에서는 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), `를 생성하고, 읽고, 옮기는 작업을 수행할 예정이다.`), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-12\",\n      className: \"step\",\n      args: [],\n      params: {\n        \"@stage\": \"create-image-data\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `원본과 동일한 크기의 이미지 데이터 인스턴스를 생성한다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData\"\n      }\n    }, `createImageData`), ` 함수를 사용하여 원본과 동일한 크기의 빈 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), `를 정해진 개수만큼 만든다.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const ctx = canvas.getContext('2d');\nconst width = canvas.width;\nconst height = canvas.height;\n\nconst layers = new Array(numOfLayers)\n  .fill(null)\n  .map(() => ctx.createImageData(width, height));\n`)), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-13\",\n      className: \"step\",\n      args: [],\n      params: {\n        \"@stage\": \"move-image-data\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `원본 스크린샷의 각 픽셀의 데이터를 읽어서 임의의 이미지 데이터 인스턴스로 옮긴다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getImageData\"\n      }\n    }, `getImageData`), ` 함수로 원본 스크린샷의 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), `를 가져온 뒤, 모든 픽셀을 순회하면서 각 픽셀의 정보를 임의의 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), `로 옮긴다.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const imageData = ctx.getImageData(0, 0, width, height);\nfor (let x = 0; x < width; x += 1) {\n  for (let y = 0; y < height; y += 1) {\n    const i = Math.floor(\n      (numOfLayers * (Math.random() + (2 * x) / width)) / 3,\n    );\n    const p = 4 * (y * width + x);\n    for (let j = 0; j < 4; j += 1) {\n      layers[i].data[p + j] = imageData.data[p + j];\n    }\n  }\n}\n`)), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-14\",\n      className: \"step\",\n      args: [],\n      params: {\n        \"@stage\": \"overlap-canvases\",\n        \"minHeight\": \"50vh\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `픽셀 데이터가 반영된 이후에 이를 각 캔버스에 반영한다.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `모든 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), `가 준비되면 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvas`), `를 만들고 해당 정보를 사용하여 그림을 그린다. 각 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvas`), ` 레이어에 픽셀이 흩어져 있지만, 겹쳐서 보면 원본과 크게 다르지 않다.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `layers.map((layer) => {\n  const clone = canvas.cloneNode();\n  clone.getContext('2d').putImageData(layer, 0, 0);\n  return clone;\n});\n`)), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-15\",\n      args: [],\n      params: {}\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `3. 각 레이어를 회전하고 이동`), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-16\",\n      className: \"step\",\n      args: [],\n      params: {\n        \"@stage\": \"rotate-and-fade-out\",\n        \"minHeight\": \"400px\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvas`), ` 레이어가 준비가 되면 css의 `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/CSS/transform\"\n      }\n    }, `transform`), `, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/CSS/opacity\"\n      }\n    }, `opacity`), `를 사용하여 각각의 레이어를 순차적으로 임의의 각도로 회전시키면서 투명하게 만들면 효과가 완성된다.`), React.createElement(\"gatsby--sectionend\", {\n      key: \"gatsby-snippet-17\",\n      args: [],\n      params: {}\n    }), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-18\",\n      args: [],\n      params: {}\n    }), React.createElement(Context, null, ({\n      value\n    }) => React.createElement(\"div\", {\n      className: \"sticky\",\n      style: {\n        top: 0\n      }\n    }, React.createElement(Scrollama, {\n      step: \".step\",\n      offset: \"0.5\",\n      progress: true,\n      debug: true\n    }, ({\n      index_,\n      stage,\n      stageProgress: progress\n    }) => value.screenshot && React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh',\n        justifyContent: 'center'\n      }\n    }, React.createElement(Gimmick, {\n      show: index_ > 0,\n      screenshot: value.screenshot,\n      stage: stage,\n      progress: progress\n    }))))), React.createElement(\"gatsby--gridend\", {\n      key: \"gatsby-snippet-19\",\n      args: [],\n      params: {}\n    }), React.createElement(Example2, null, React.createElement(\"h1\", null, \"THE END\")));\n  }\n\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"타노스 이스터 에그 들여다보기","date":"May 10, 2019","max_width":"60rem"},"fields":{"slug":"/thanos-explained/","langKey":"ko"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/thanos-explained/","previous":null,"next":{"fields":{"slug":"/word-superiority-effect/","langKey":"ko","directoryName":"word-superiority-effect","fileExt":"mdx"},"frontmatter":{"title":"'캠릿브지 대학의 연결구과' 변환기"}},"translations":["en"],"fileExt":"mdx"}}}