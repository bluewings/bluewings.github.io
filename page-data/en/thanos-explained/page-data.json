{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/en/thanos-explained/","webpackCompilationHash":"95257a819a04e6b83326","result":{"data":{"site":{"siteMetadata":{"title":"아빠는 개발자","titleEn":"Dev Dad","author":"Cha Sung Won","social":{"disqusShortname":"dev-dad"},"github":{"owner":"bluewings","repository":"dev-dad"}}},"mdx":{"id":"88303e8d-b8d0-5903-a098-20365f692419","excerpt":"With the release of Avengers: Endgame (2019), Google added an Easter Egg to its search results page. When you search for Thanos on Google, you will see an…","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-0\",\n      args: [],\n      params: {}\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `With the release of Avengers: Endgame (2019), Google added an Easter Egg to its search results page. When you search for Thanos on Google, you will see an Infinity Gauntlet icon on the right, and when you click on it, half of the search results disappear into the dust.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `My son sees Easter Egg and asks, “Dad, Can you do that?” I said, “Maybe?” But I do not have any idea how to implement it. After all, Using browser’s developer tools, I looked at how it works. Easter Egg was expected to be complex, but was implemented in a very simple way, contrary to my expectation.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To view the demo, click on the Infinity Guntlet on the right.`), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-1\",\n      args: [],\n      params: {}\n    }), React.createElement(Example, null), React.createElement(\"gatsby--gridend\", {\n      key: \"gatsby-snippet-2\",\n      args: [],\n      params: {}\n    }), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Web pages turn into dust in three steps below.`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `Capture the screenshot`), `: Capture screenshot of original element using the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://html2canvas.hertzen.com/\"\n      }\n    }, `html2canvas`), ` library.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `Split into multiple layers`), `: Create an `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), ` instance of the same size as the original, and get the data from each pixel of the original screenshot and move it to any `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), ` instance. After `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), ` is reflected, update it on each `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvas`), `.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"li\"\n    }, `Rotate and move layers`), `: Rotate each `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"li\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvas`), ` layer at any angle and adjust the opacity to gradually become invisible.`)), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Let’s take a step-by-step look at the example along with the code.`), React.createElement(\"gatsby--context\", {\n      key: \"gatsby-snippet-3\",\n      args: [],\n      params: {}\n    }), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-4\",\n      args: [],\n      params: {\n        \"overflow\": \"auto\"\n      }\n    }), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-5\",\n      className: \"step\",\n      args: [],\n      params: {}\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `1. Capture the screenshot`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The example on the right is written with the following HTML code.`), React.createElement(Context, null, ({\n      value\n    }) => React.createElement(Code, {\n      codeString: value.html || '',\n      language: \"html\"\n    })), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `For the next step, you need to convert the element with the HTML hierarchy to an image. And you can use the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://html2canvas.hertzen.com/\"\n      }\n    }, `html2canvas`), ` library to get a screenshot of a specific HTML element.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `import html2canvas from 'html2canvas';\n\nhtml2canvas(element, {\n  backgroundColor: null,\n}).then((canvas) => {\n  // doSomething(canvas);\n});\n`)), React.createElement(\"gatsby--sectionend\", {\n      key: \"gatsby-snippet-6\",\n      args: [],\n      params: {}\n    }), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-7\",\n      className: \"step\",\n      args: [],\n      params: {\n        \"@stage\": \"capture\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Run the above code to create a screenshot of the target element. (click)`), React.createElement(\"gatsby--sectionend\", {\n      key: \"gatsby-snippet-8\",\n      args: [],\n      params: {}\n    }), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-9\",\n      args: [],\n      params: {}\n    }), React.createElement(Context, null, ({\n      setValue\n    }) => {\n      const handleScreenshotCapture = canvas => {\n        if (canvas) {\n          setValue('screenshot', canvas);\n        }\n      };\n\n      const handleSampleLoad = html => {\n        setValue('html', html);\n      };\n\n      return React.createElement(\"div\", {\n        className: \"sticky\",\n        style: {\n          top: 0\n        }\n      }, React.createElement(Scrollama, {\n        step: \".step\",\n        offset: \"0.5\",\n        progress: true\n      }, ({\n        index_\n      }) => React.createElement(\"div\", null, React.createElement(Sample, {\n        type: \"text\",\n        capture: index_ > 0,\n        onCapture: handleScreenshotCapture,\n        onLoad: handleSampleLoad\n      }))));\n    }), React.createElement(\"gatsby--gridend\", {\n      key: \"gatsby-snippet-10\",\n      args: [],\n      params: {}\n    }), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-11\",\n      args: [],\n      params: {\n        \"overflow\": \"auto\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `2. Split into multiple layers`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `At this stage, each pixel of the original screenshot is randomly divided into several `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvases`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `Canvas`), ` uses the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), ` interface to represent pixel data in the area.  In each of the steps below, we will create, read, and move `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), `.`), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-12\",\n      className: \"step\",\n      args: [],\n      params: {\n        \"@stage\": \"create-image-data\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Create an ImageData instance of the same size as the original.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Use the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData\"\n      }\n    }, `createImageData`), ` function to create a set number of empty `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), ` of the same size as the original.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const ctx = canvas.getContext('2d');\nconst width = canvas.width;\nconst height = canvas.height;\n\nconst layers = new Array(numOfLayers)\n  .fill(null)\n  .map(() => ctx.createImageData(width, height));\n`)), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-13\",\n      className: \"step\",\n      args: [],\n      params: {\n        \"@stage\": \"move-image-data\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Get ImageData for each pixel in the original screenshot and move it to any ImageData instance.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getImageData\"\n      }\n    }, `getImageData`), ` function gets the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), ` of the original screenshot, then traverses all the pixels and moves each pixel’s `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), ` randomly to any `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), ` instance.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const imageData = ctx.getImageData(0, 0, width, height);\nfor (let x = 0; x < width; x += 1) {\n  for (let y = 0; y < height; y += 1) {\n    const i = Math.floor(\n      (numOfLayers * (Math.random() + (2 * x) / width)) / 3,\n    );\n    const p = 4 * (y * width + x);\n    for (let j = 0; j < 4; j += 1) {\n      layers[i].data[p + j] = imageData.data[p + j];\n    }\n  }\n}\n`)), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-14\",\n      className: \"step\",\n      args: [],\n      params: {\n        \"@stage\": \"overlap-canvases\",\n        \"minHeight\": \"50vh\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `After all ImageData is reflected, update on each canvas.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When all `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), ` is ready, create a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvas`), ` and draw a image using that `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/API/ImageData\"\n      }\n    }, `ImageData`), `. Pixels are scattered in each `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvas`), ` layer, but they are not much different from the original in layering.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `layers.map((layer) => {\n  const clone = canvas.cloneNode();\n  clone.getContext('2d').putImageData(layer, 0, 0);\n  return clone;\n});\n`)), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-15\",\n      args: [],\n      params: {}\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `3. Rotate and move layers`), React.createElement(\"gatsby--section\", {\n      key: \"gatsby-snippet-16\",\n      className: \"step\",\n      args: [],\n      params: {\n        \"@stage\": \"rotate-and-fade-out\",\n        \"minHeight\": \"300px\"\n      }\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/HTML/Canvas\"\n      }\n    }, `canvas`), ` layer is ready, the effect is completed by using the css `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/CSS/transform\"\n      }\n    }, `transform`), ` and `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/docs/Web/CSS/opacity\"\n      }\n    }, `opacity`), ` to rotate each layer sequentially at any angle and make it transparent.`), React.createElement(\"gatsby--sectionend\", {\n      key: \"gatsby-snippet-17\",\n      args: [],\n      params: {}\n    }), React.createElement(\"gatsby--grid\", {\n      key: \"gatsby-snippet-18\",\n      args: [],\n      params: {}\n    }), React.createElement(Context, null, ({\n      value\n    }) => React.createElement(\"div\", {\n      className: \"sticky\",\n      style: {\n        top: 0\n      }\n    }, React.createElement(Scrollama, {\n      step: \".step\",\n      offset: \"0.5\",\n      progress: true,\n      debug: true\n    }, ({\n      index_,\n      stage,\n      stageProgress: progress\n    }) => value.screenshot && React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh',\n        justifyContent: 'center'\n      }\n    }, React.createElement(Gimmick, {\n      show: index_ > 0,\n      screenshot: value.screenshot,\n      stage: stage,\n      progress: progress\n    }))))), React.createElement(\"gatsby--gridend\", {\n      key: \"gatsby-snippet-19\",\n      args: [],\n      params: {}\n    }), React.createElement(Example2, null, React.createElement(\"h1\", null, \"THE END\")));\n  }\n\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Thanos Easter Egg, How it works","date":"May 10, 2019","max_width":"60rem"},"fields":{"slug":"/en/thanos-explained/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/en/thanos-explained/","previous":null,"next":{"fields":{"slug":"/en/playing-with-fonts/","langKey":"en","directoryName":"playing-with-fonts","fileExt":"mdx"},"frontmatter":{"title":"Playing with Fonts"}},"translations":["en"],"fileExt":"mdx"}}}