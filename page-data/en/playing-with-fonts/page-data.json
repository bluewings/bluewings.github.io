{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/en/playing-with-fonts/","webpackCompilationHash":"42effba54538b87776f7","result":{"data":{"site":{"siteMetadata":{"title":"아빠는 개발자","author":"Cha Sung Won","social":{"disqusShortname":"dev-dad"},"github":{"owner":"bluewings","repository":"dev-dad"}}},"mdx":{"id":"336dea11-3b41-5012-99cf-09c44f03800d","excerpt":"Google Fonts + 한국어  site has some amazing typographic effects. Some of them can't be implemented with CSS alone, so I wanted to make them myself. Among them, I…","code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nconst layoutProps = {};\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://googlefonts.github.io/korean/\"\n      }\n    }, `Google Fonts + 한국어`), ` site has some amazing typographic effects. Some of them can’t be implemented with CSS alone, so I wanted to make them myself.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Among them, I have implemented waving text in code. The result of the coding is as follows.`), React.createElement(WarpText, {\n      message: \"Developer\",\n      fontFamily: \"Montserrat\",\n      animate: true\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `To implement the effects, the following steps have been taken: The detailed step-by-step process is described below.`), React.createElement(MDXTag, {\n      name: \"ol\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Converts text to vector.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Draw text with SVG or Canvas.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Use transform function to change the path.`), React.createElement(MDXTag, {\n      name: \"li\",\n      components: components,\n      parentName: \"ol\"\n    }, `Repeat step 3. (Animation)`)), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `1. Converts text to vector.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I searched for “font parser” and found `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://opentype.js.org/\"\n      }\n    }, `opentype.js`), `.`), React.createElement(MDXTag, {\n      name: \"blockquote\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components,\n      parentName: \"blockquote\"\n    }, `opentype.js is a JavaScript parser and writer for TrueType and OpenType fonts.`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `After loading the font using the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://github.com/opentypejs/opentype.js#fontstringtoglyphsstring\"\n      }\n    }, `API`), `, you can see how to bring the glyph of the letter.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `import { load } from 'opentype.js';\n\nload('montserrat.woff', (err, font) => {\n  const glyphs = font.stringToGlyphs('Developer');\n  console.log(glyphs);\n});\n`)), React.createElement(JsonTree, {\n      message: \"Developer\"\n    }), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you check the execution results, you can get information about the glyphs for each character, and there is information in path.commands that can be drawn. (Click each node to see detailed information)`), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `2. Draw text with SVG or Canvas.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You can draw the SVG path with the information contained in path.commands. If you use Canvas, you can use the following method. `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo\"\n      }\n    }, `moveTo`), `, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo\"\n      }\n    }, `lineTo`), `, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo\"\n      }\n    }, `quadraticCurveTo`), `, `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo\"\n      }\n    }, `bezierCurveTo`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I drew a path and point in SVG with path.commands information.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `REF: `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://developer.mozilla.org/ko/docs/Web/SVG/Tutorial/Paths#%EC%84%A0(Line)_%EB%AA%85%EB%A0%B9%EC%96%B4\"\n      }\n    }, `Paths - SVG: Scalable Vector Graphics | MDN`)), React.createElement(WarpText, {\n      message: \"Developer\",\n      fontFamily: \"Montserrat\",\n      outline: true,\n      transform: null,\n      padding: 10,\n      paddingTop: 2,\n      paddingBottom: 2\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `3. Use transform function to change the path.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I searched for a library called `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://benjamminf.github.io/warpjs/\"\n      }\n    }, `Warp.js`), `. This library allows you to distort the path of SVG into a form using user-defined functions. See `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://codepen.io/benjamminf/pen/NpZLeb\"\n      }\n    }, `Warp.js example`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Using trigonometric functions seems to be able to show shaking effects. In the result of the previous step, the following results are obtained when the y coordinate is converted using the Sine function. Voila!`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const warp = new Warp(svg);\n\nwarp.transform(([ x, y ]) => [ x, y + 15 * Math.sin(x / 50) ]);\n`)), React.createElement(WarpText, {\n      message: \"Developer\",\n      fontFamily: \"Montserrat\",\n      outline: true\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `4. Repeat step 3. (Animation)`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you keep moving the Sine function and draw it, you can see the following animation.`), React.createElement(Trigonometric, null), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Applying this to the text is as follows.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you want to maintain the same speed regardless of the device’s performance, you can use the offset value of time as a factor.`), React.createElement(WarpText, {\n      message: \"Developer\",\n      fontFamily: \"Montserrat\",\n      animate: true\n    }), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `const warp = new Warp(svg);\n\n// Apply x and y values to the third and fourth arguments\n// to remember the coordinates of the original before applying the animation\nwarp.transform(([x, y]) => [x, y, x, y]);\n\n// start time\nconst startAt = new Date().valueOf();\n\nfunction animate() {\n  // time of current frame\n  const offset = (new Date().valueOf() - startAt) / 1000;\n  // compute coordinates from the original coordinate values and pass the original values intact\n  warp.transform(([x, y, ox, oy]) => [\n    x,\n    oy + 15 * Math.sin(x / 50 + offset),\n    ox,\n    oy,\n  ]);\n  requestAnimationFrame(animate);\n}\n\nanimate();\n`)), React.createElement(MDXTag, {\n      name: \"hr\",\n      components: components\n    }), React.createElement(MDXTag, {\n      name: \"h2\",\n      components: components\n    }, `Other transform functions`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You can change the transform function to create different effects.`), React.createElement(WarpText, {\n      message: \"NEMO x DORY\",\n      fontFamily: \"Montserrat\",\n      transform: transform1,\n      animate: true,\n      paddingTop: 2\n    }), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function transform([x, y, { innerHeight, scale, offset }]) {\n  const wave = scale(0.2);\n  const z = Math.max(0, y / innerHeight - 0.1);\n  return [\n    x,\n    y + wave * Math.sin((x + scale(offset) / 400 / 2) / scale(0.5)) * z,\n  ];\n}\n`)), React.createElement(\"div\", {\n      style: {\n        height: '2.5rem'\n      }\n    }), React.createElement(WarpText, {\n      message: \"Brrrr...\",\n      fontFamily: \"Montserrat\",\n      transform: transform2,\n      animate: true,\n      interpolate: 20,\n      paddingTop: 2,\n      paddingBottom: 2\n    }), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function transform([x, y, { scale, offset }]) {\n  const wave = scale(0.02);\n  return [\n    x + wave * Math.sin((y + scale(offset) / 2000) / scale(0.05)),\n    y + wave * Math.sin((x + scale(offset) / 2000) / scale(0.05)),\n  ];\n}\n`)), React.createElement(\"div\", {\n      style: {\n        height: '2.5rem'\n      }\n    }), React.createElement(WarpText, {\n      message: \"feel dizzy...\",\n      fontFamily: \"Cute Font\",\n      transform: transform3,\n      animate: true,\n      interpolate: 20,\n      padding: paddingTop\n    }), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function transform([x, y, { scale, offset }]) {\n  const wave = scale(0.2);\n  return [\n    x + wave * Math.sin((y + scale(offset) / 1000) / scale(0.5)),\n    y + wave * Math.sin((x + scale(offset) / 1000) / scale(0.5)),\n  ];\n}\n`)), React.createElement(\"div\", {\n      style: {\n        height: '2.5rem'\n      }\n    }), React.createElement(\"div\", {\n      style: {\n        position: 'relative',\n        maxWidth: 600\n      }\n    }, React.createElement(WarpText, {\n      message: \"SUWON\",\n      fontFamily: \"Montserrat\",\n      transform: transformA1,\n      color: \"silver\",\n      paddingRight: 200,\n      paddingBottom: 150\n    }), React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        width: '100%'\n      }\n    }, React.createElement(WarpText, {\n      message: \"SUWON\",\n      fontFamily: \"Montserrat\",\n      transform: transformA2,\n      paddingRight: 200,\n      paddingBottom: 200\n    }))), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-js\"\n      }\n    }, `function transformA1([x, y, { innerHeight }]) {\n  return [\n    x + innerHeight - y,\n    innerHeight * 0.5 + y * 0.5 + x / 3,\n  ];\n}\nfunction transformA2([x, y]) {\n  return [\n    x,\n    y + x / 3,\n  ];\n}\n`)), React.createElement(\"div\", {\n      style: {\n        height: '2.5rem'\n      }\n    }));\n  }\n\n}\nMDXContent.isMDXComponent = true;"},"frontmatter":{"title":"Playing with Fonts","date":"June 23, 2019","max_width":null},"fields":{"slug":"/en/playing-with-fonts/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/en/playing-with-fonts/","previous":{"fields":{"slug":"/en/thanos-explained/","langKey":"en","directoryName":"thanos-explained","fileExt":"mdx"},"frontmatter":{"title":"Thanos Easter Egg, How it works"}},"next":null,"translations":["en"],"fileExt":"mdx"}}}